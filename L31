package org.example;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

//import static jdk.javadoc.internal.tool.Main.execute;

public class Main extends TelegramLongPollingBot {


    public static void main(String[] args) {

        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new Main());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {

        return "SnakeTgBot"; // замініть на ім'я вашого бота
    }

    //s
    @Override
    public String getBotToken() {
        return "7214446242:AAG88BNabVWf_eGb1IHhfuWh6Pa9tOCaGck"; // замініть на токен вашого бота
    }

    Long chattID;
    Integer lastMessageId;
    boolean isAlive;
    Move move;

    @Override
    public void onUpdateReceived(Update update) {
        if (!isAlive) {
            move = new Move();
            move.start();
            isAlive = true;
        }

        if (update.hasMessage() && update.getMessage().hasText()) {

            Message message = update.getMessage();
            chattID = message.getChatId();
            DataBase dataBase = DataBase.getInstance();
            dataBase.saveData(message.getText());
//            mesId = message.getMessageId();
            String text = message.getText();
            String data = "";
            if (text.equals("bottom") || text.equals("left")) {

                Snake.changeSide(text);

            }

        }
    }

    private void send() {
        SendMessage response = new SendMessage();
        response.setChatId(String.valueOf(chattID));
        response.setText(Snake.parseSnake());
        response.setReplyMarkup(Sertting.getKeb());
        ;
        try {
            Message sentMessage = execute(response);
            lastMessageId = sentMessage.getMessageId();
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

    }

    private void delete() {
        if (lastMessageId == null)
            return;
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chattID));
        deleteMessage.setMessageId(lastMessageId);

        try {
            execute(deleteMessage); // Виконання запиту на видалення

        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    class Move extends Thread {
        @Override
        public void run() {
            while (true) {
                send();
                Snake.move();
                delete();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
}


public class DataBase implements IDB{

    private static final String fileName = "database.txt";

    private static DataBase instance;

    DataBase(){

    }

    public static DataBase getInstance(){
        if(instance == null){
            instance = new DataBase();
        }
        return instance;
    }

    public static void writeToFile(String text){
        try(BufferedWriter bWriter = new BufferedWriter(new FileWriter(fileName))){
            bWriter.write(text);
            System.out.println("Text has been written to: " + fileName);
        } catch (IOException e) {
            System.out.println("An error occured: " + e.getMessage());
        }
    }

    public void saveData(String data){
        writeToFile(data);
    }

    public String[] loadData(){

        return null;
    }

    public void deleteData(String data){

    }

    public void updateData(String data){

    }
}


public interface IDB {

}


public class Snake {
    static String[][] dataSnake = new String[10][10];
    static boolean isAlive;

    static Way currentWay = Way.RIGHT;
    static ArrayList<PointSnake> points = new ArrayList<>();

    private static void init(){
        points.add(new PointSnake(4,5));
        points.add(new PointSnake(5,5));
        points.add(new PointSnake(6,5));
        update();
    }
    private static void update(){

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                dataSnake[i][j]=" . ";
            }
        }
        for (int i = 0; i < points.size(); i++) {
            dataSnake[points.get(i).getY()][points.get(i).getX()] = "X";
        }

    }

    public static String parseSnake(){
        if(!isAlive){
            init();
            isAlive = true;
        }


        String response = "";
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                response+=dataSnake[i][j];
            }
            response+="\n";
        }
        return response;
    }

    public static void changeSide(String text) {
        switch (text){
            case "left":
                currentWay = Way.LEFT;
                break;
            case "top":
                currentWay = Way.TOP;
                break;
            case "bot":
                currentWay = Way.BOT;
                break;
            case "right":
                currentWay = Way.RIGHT;
                break;
        }
    }

    public static void move() {
        switch (currentWay) {
            case RIGHT -> {
                for (int i = points.size() - 1; i >= 1; i--) {
                    points.get(i).setX(points.get(i - 1).getX());
                    points.get(i).setY(points.get(i - 1).getY());
                }
                if(points.get(0).getX() < 10) {
                    points.get(0).setX(points.get(0).getX() + 1);
                }
            }

            case LEFT -> {
                for (int i = points.size() - 1; i >= 1; i--) {
                    points.get(i).setX(points.get(i - 1).getX());
                    points.get(i).setY(points.get(i - 1).getY());
                }
                if(points.get(0).getX() > 0) {
                    points.get(0).setX(points.get(0).getX() - 1);
                }
            }

            case TOP -> {
                for (int i = points.size() - 1; i >= 1; i--) {
                    points.get(i).setX(points.get(i - 1).getX());
                    points.get(i).setY(points.get(i - 1).getY());
                }
                if(points.get(0).getY() < 10) {
                    points.get(0).setY(points.get(0).getY() - 1);
                }
            }

            case BOT -> {
                for (int i = points.size() - 1; i >= 1; i--) {
                    points.get(i).setX(points.get(i - 1).getX());
                    points.get(i).setY(points.get(i - 1).getY());
                }
                if(points.get(0).getY() > 0) {
                    points.get(0).setY(points.get(0).getY() + 1);
                }
            }
        }
        update();
    }



}


public enum Way {
    TOP,RIGHT,BOT,LEFT
}


public class PointSnake {
    private int x;
    private int y;

    public PointSnake(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }
}


 public class Sertting {
        public static ReplyKeyboardMarkup getKeb(){
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();

            // Перший рядок кнопок
            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton(" "));
            row1.add(new KeyboardButton("top"));
            row1.add(new KeyboardButton(" "));

            // Другий рядок кнопок
            KeyboardRow row2 = new KeyboardRow();
            row2.add(new KeyboardButton("left"));

            row2.add(new KeyboardButton("bottom"));

            KeyboardRow row3 = new KeyboardRow();

            row2.add(new KeyboardButton("right"));


            // Додавання рядків до клавіатури
            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);

            // Призначення клавіатури до відповіді
            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(false); // Змінює розмір кнопок
            keyboardMarkup.setOneTimeKeyboard(true); // Клавіатура буде постійно показана
            return keyboardMarkup;
        }
    }
